// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniqueIdentifiersBenchmark.Data;

#nullable disable

namespace UniqueIdentifiersBenchmark.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240828113957_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyCuid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AuthorsAsPrimaryKeyCuid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AuthorsAsPrimaryKeyGuid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyInt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AuthorsAsPrimaryKeyInt");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyNanoid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AuthorsAsPrimaryKeyNanoid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyUlid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AuthorsAsPrimaryKeyUlid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithCuidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("AuthorsWithCuidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithGuidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.ToTable("AuthorsWithGuidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithNanoidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("AuthorsWithNanoidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithUlidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.ToTable("AuthorsWithUlidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyCuid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BooksAsPrimaryKeyCuid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyGuid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BooksAsPrimaryKeyGuid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyInt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BooksAsPrimaryKeyInt");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyNanoid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BooksAsPrimaryKeyNanoid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyUlid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BooksAsPrimaryKeyUlid");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithCuidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("BooksWithCuidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithGuidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.ToTable("BooksWithGuidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithNanoidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("BooksWithNanoidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithUlidReferenceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.ToTable("BooksWithUlidReferenceId");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyCuid", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyCuid", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyGuid", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyGuid", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyInt", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyInt", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyNanoid", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyNanoid", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookAsPrimaryKeyUlid", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyUlid", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithCuidReferenceId", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithCuidReferenceId", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithGuidReferenceId", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithGuidReferenceId", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithNanoidReferenceId", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithNanoidReferenceId", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.BookWithUlidReferenceId", b =>
                {
                    b.HasOne("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithUlidReferenceId", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyCuid", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyGuid", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyInt", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyNanoid", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorAsPrimaryKeyUlid", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithCuidReferenceId", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithGuidReferenceId", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithNanoidReferenceId", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UniqueIdentifiersBenchmark.Data.Entity.AuthorWithUlidReferenceId", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
